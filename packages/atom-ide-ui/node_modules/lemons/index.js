"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "LazyResult", {
  enumerable: true,
  get: function get() {
    return _LazyResult["default"];
  }
});
Object.defineProperty(exports, "Failure", {
  enumerable: true,
  get: function get() {
    return _LazyResult.Failure;
  }
});
Object.defineProperty(exports, "Initial", {
  enumerable: true,
  get: function get() {
    return _LazyResult.Initial;
  }
});
Object.defineProperty(exports, "Loading", {
  enumerable: true,
  get: function get() {
    return _LazyResult.Loading;
  }
});
Object.defineProperty(exports, "Success", {
  enumerable: true,
  get: function get() {
    return _LazyResult.Success;
  }
});
Object.defineProperty(exports, "Maybe", {
  enumerable: true,
  get: function get() {
    return _Maybe["default"];
  }
});
Object.defineProperty(exports, "Just", {
  enumerable: true,
  get: function get() {
    return _Maybe.Just;
  }
});
Object.defineProperty(exports, "Nothing", {
  enumerable: true,
  get: function get() {
    return _Maybe.Nothing;
  }
});
Object.defineProperty(exports, "Result", {
  enumerable: true,
  get: function get() {
    return _Result["default"];
  }
});
Object.defineProperty(exports, "Err", {
  enumerable: true,
  get: function get() {
    return _Result.Err;
  }
});
Object.defineProperty(exports, "Ok", {
  enumerable: true,
  get: function get() {
    return _Result.Ok;
  }
});

var _LazyResult = _interopRequireWildcard(require("./LazyResult"));

var _Maybe = _interopRequireWildcard(require("./Maybe"));

var _Result = _interopRequireWildcard(require("./Result"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }